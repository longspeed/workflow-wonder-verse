datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  courses       Course[]  @relation("CourseInstructor")
  enrollments   Enrollment[]
  reviews       Review[]
  automations   Automation[]
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  category    String
  level       String
  price       Float
  duration    Int
  rating      Float     @default(0)
  students    Int       @default(0)
  instructorId String
  instructor  User      @relation("CourseInstructor", fields: [instructorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  enrollments Enrollment[]
  reviews     Review[]
  lessons     Lesson[]
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String
  duration    Int
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Automation {
  id          String   @id @default(cuid())
  name        String
  description String?
  trigger     String
  action      String
  isActive    Boolean  @default(true)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  INSTRUCTOR
  ADMIN
} 